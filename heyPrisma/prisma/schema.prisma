generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model blood_groups {
  bloodgroup       String    @id
  available_donors Int       @default(0)
  total_donors     Int       @default(0)
  last_updated     DateTime? @default(now()) @db.Timestamptz(6)
}

model donation_requests {
  id                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  requested_by       String?     @db.Uuid
  blood_group_needed String
  location           String
  urgency            String
  description        String?
  status             String      @default("pending")
  created_at         DateTime?   @default(now()) @db.Timestamptz(6)
  users              users?      @relation(fields: [requested_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  donations          donations[]
}

model donations {
  id                                  String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  donor_id                            String?            @db.Uuid
  recipient_id                        String?            @db.Uuid
  request_id                          String?            @db.Uuid
  donation_date                       DateTime?          @default(now()) @db.Timestamptz(6)
  notes                               String?
  users_donations_donor_idTousers     users?             @relation("donations_donor_idTousers", fields: [donor_id], references: [id], onUpdate: NoAction)
  users_donations_recipient_idTousers users?             @relation("donations_recipient_idTousers", fields: [recipient_id], references: [id], onUpdate: NoAction)
  donation_requests                   donation_requests? @relation(fields: [request_id], references: [id], onUpdate: NoAction)
}

model users {
  id                                      String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name                               String
  email                                   String              @unique
  blood_group                             String
  contact                                 String
  location                                String
  role                                    String[]            @default(["donor"])
  available_to_donate                     Boolean             @default(false)
  created_at                              DateTime?           @default(now()) @db.Timestamptz(6)
  donation_requests                       donation_requests[]
  donations_donations_donor_idTousers     donations[]         @relation("donations_donor_idTousers")
  donations_donations_recipient_idTousers donations[]         @relation("donations_recipient_idTousers")
}
